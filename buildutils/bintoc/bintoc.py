# Copyright (c) 2021. kms1212(Minsu Kwon)
# This file is part of OpenFSL.
#
# OpenFSL and its source code is published over BSD 3-Clause License.
# Check the full BSD-3-Clause license for more details.
# <https://raw.githubusercontent.com/kms1212/OpenFSL/main/LICENSE>

import argparse
import re
import os

parser = argparse.ArgumentParser(description="Convert binary file to C source file.")
parser.add_argument("--header", dest="header", type=argparse.FileType("r"), required=False, help="Heading text file")
parser.add_argument("--footer", dest="footer", type=argparse.FileType("r"), required=False, help="Trailing text file")
parser.add_argument("--incfile", dest="incfile", required=False, action="store_true", help="Generate include file")
parser.add_argument("--incguard", dest="incguard", type=str, required=False, help="Include file guard string")
parser.add_argument("src", metavar="SRC", type=argparse.FileType("w"), help="C source to generate")
parser.add_argument("bin", metavar="BIN", type=argparse.FileType("rb"), nargs="+", help="Binary files...")

args = vars(parser.parse_args())

output_file = args.get("src")
header_file = args.get("header")
footer_file = args.get("footer")

output_file.write("// This file is generated by bintoc.\n\n")

print("Generating C source...")

if header_file is not None:
    output_file.write(header_file.read())

if args.get("incfile") is True:
    output_file.write("#ifndef " + args.get("incguard") + "\n")
    output_file.write("#define " + args.get("incguard") + "\n\n")

for bin_file in args.get("bin"):
    print(os.path.basename(bin_file.name))
    # Variable name
    var_name = re.sub("[^0-9A-Za-z_]+", "_", os.path.basename(bin_file.name))

    # File size
    bin_file.seek(0, os.SEEK_END)
    file_size = bin_file.tell()
    bin_file.seek(0, os.SEEK_SET)

    # Data
    output_file.write("const unsigned long long _blob_" + var_name + "_len = " + str(file_size) + ";\n")
    output_file.write("const unsigned char _blob_" + var_name + "_data[] = {")
    for i in range(file_size):
        if i % 8 == 0:
            output_file.write("\n")
        output_file.write("0x" + bin_file.read(1).hex() + ", ")

    output_file.write("};\n\n")
    bin_file.close()

if args.get("incfile") is True:
    output_file.write("\n#endif  // " + args.get("incguard") + "\n")

if footer_file is not None:
    output_file.write(footer_file.read())

print("Source file(s) successfully generated!")

output_file.flush()
output_file.close()
